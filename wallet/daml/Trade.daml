-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This module implements atomic swap of assets.
module Trade where

import DA.Set as Set
import Asset
import DA.Action
-- The Trade templates represents a proposal for a swap of two assets between two parties: the proposer and the receiver
template Trade
  with
    proposer : Party
    receiver : Party
    offeredAssetCid : ContractId AssetInSwap
    -- requestedAssetsTxPreApprovalCid : ContractId TransferPreApproval
    requestedAssetType: AssetType
    requestedAssetCids: [ContractId Asset]
    outputAmounts: [Decimal]
  where
    signatory proposer
    observer receiver
    let
      validateTxInputs: [ContractId Asset] -> [Decimal] -> Update Decimal
      validateTxInputs assetCids outputAmounts = do
        totAssetAmount <- sum . map (\x -> x.amount) <$> forA assetCids \assetCid -> do
          asset <- fetch assetCid
          assertMsg "Asset type mismatch between asset and account" $
            asset.assetType == requestedAssetType
          assertMsg "Owner mismatch between asset and account" $
            asset.owner == receiver
          archive assetCid
          return asset
        assertMsg "Insufficient funds passed to create all output assets" $
          totAssetAmount >= sum outputAmounts
        return totAssetAmount

    choice Trade_Cancel : ()
      controller proposer
      do
        exercise offeredAssetCid Cancel_Swap
        return ()

    choice Trade_Reject : ()
      controller receiver
      do
        exercise offeredAssetCid Reject_Swap
        return ()

    choice Trade_Settle : (ContractId Asset, ContractId Asset)
      with
        requestedAssetCid : ContractId Asset
        offeredTxPreApprovalCid : ContractId TransferPreApproval
      controller receiver
      do
        assertMsg "Non fungible assets cannot be merged" $
          assetType.fungible
        totAssetAmount <- validateTxInputs requestedAssetCids outputAmounts
        let 
          createOutputAssets assetsList amt = do
            assertMsg "Each output asset amount must be positive" $
              amt > 0.0
            a <- create Asset with
              assetType = requestedAssetType
              owner = receiver
              amount = amt
              observers = Set.empty
            return $ a :: assetsList
        outputAssets <- foldlA createOutputAssets [] outputAmounts
        
        if (totAssetAmount > sum outputAmounts)
        then do 
          a <- create Asset with
            assetType = requestedAssetType
            owner = receiver
            amount = (totAssetAmount - sum outputAmounts)
            observers = Set.empty
          
          offeredAsset <- fetch offeredAssetCid
          
          requestedAssetsTxPreApprovalCid <- create TransferPreApproval with
            asset = offeredAsset.asset
            newOwner = receiver

          newReceiverAsset <- exercise offeredTxPreApprovalCid TransferPreApproval_TransferAssetInSwap 
            with assetInSwapCid = offeredAssetCid
          newProposerAsset <- exercise requestedAssetsTxPreApprovalCid TransferPreApproval_TransferAsset 
            with txAssetCid = requestedAssetCid
          return (newProposerAsset, newReceiverAsset)


         else
          return (a,a)


-- TransferPreApproal template gives the transfer originator the authority to change the asset owner
-- from the transfer originator party to the transfer recipient party
template TransferPreApproval
  with
    asset : Asset
    newOwner : Party
  where
    signatory asset.assetType.issuer
    observer newOwner

    choice TransferPreApproval_Cancel : ()
      controller asset.owner
      do
        return ()

    choice TransferPreApproval_Reject : ()
      controller newOwner
      do
        return ()

    choice TransferPreApproval_TransferAsset : ContractId Asset
      with
        txAssetCid : ContractId Asset
      controller asset.owner, newOwner
      do
        txAsset <- fetch txAssetCid
        assertMsg "Transfer pre-approval asset and transfer asset do not match" $
          asset == txAsset with observers = asset.observers
        archive txAssetCid
        create asset with
          owner = newOwner
          observers = Set.empty

    choice TransferPreApproval_TransferAssetInSwap : ContractId Asset
      with
        assetInSwapCid : ContractId AssetInSwap
      controller asset.owner, newOwner
      do
        assetInSwap <- fetch assetInSwapCid
        assertMsg "Transfer pre-approval asset and transfer asset do not match" $
          asset == assetInSwap.asset with observers = asset.observers
        archive assetInSwapCid
        create asset with
          owner = newOwner
          observers = Set.empty

-- The AssetInSwap template represents an asset reserved for a swap.
-- When a trade proposal is created, the asset contract, which is the source of funds for the swap, 
-- is archived, so it cannot be used to create other swaps.
-- AssetInSwap contract cannot be created by asset owner using "create" command because this requires the
-- authority of the issuer. AssetInSwap can only be created by exercising Create_Trade choice on
-- AssetHoldingAccount template, which provides the authority of both asset issuer and asset owner.
-- The template provides trade proposer with a choice to cancel the swap.
-- It also provides the receiver with a choice to accept or reject the trade.
template AssetInSwap
  with
    -- The asset to be swapped.
    asset : Asset
    -- The receiver of the swap proposal.
    receiver : Party
  where
    signatory (signatory asset)
    observer receiver
    ensure (if asset.assetType.fungible then asset.amount>0.0 else (asset.amount==1.0))

    choice Cancel_Swap : ContractId Asset
      controller asset.owner 
      do
        create asset

    choice Reject_Swap : ContractId Asset
      controller receiver
      do
        create asset

    choice Accept_Swap : ContractId Asset
      -- Requiring the authority of both the recipient and the asset issuer ensures that transfer can only be accepted
      -- by calling Deposit_Transfer_Into_Account choice on the AssetHoldingAccount template,
      -- which in turn ensures one cannot accept asset transfer without having asset holding account
      controller receiver, asset.assetType.issuer
      do
        create asset with
          owner = receiver
          observers = Set.empty